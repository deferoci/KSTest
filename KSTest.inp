clear 

set verbose off

function scalar D_pval(scalar n, scalar D)
	# parameters definition
	nD=n*D
	m1=round(n*D+0.5)
	m2=round(n-n*D-0.5)
	l1=round(2*n*D+0.5)
	n1=n*(1+D)
	n2=n*(1-D)

	# B matrix
	B = zeros(2*(n+1),2*(n+1))

	# B11 matrix
	loop k = m1+1 .. n+1
	    B[k,k]=1
	endloop

	loop r = m1 .. (n-1)
	    loop k = (r+1) .. n
            B[k+1,r+1] = bincoeff(n-r, k-r) * (((k-r)/(n1-r))^(k-r)) * (((n1-k)/(n1-r))^(n-k))
	    endloop
	endloop

	# B22 matrix
	loop k = n+2 .. n+2+m2
	    B[k,k]=1
	endloop

	loop r = 0 .. m2-1
	    loop k = r+1 .. m2
            B[k+n+2,r+n+2] = bincoeff(n-r,k-r) * (((k-r)/(n2-r))^(k-r)) * (((n2-k)/(n2-r))^(n-k))
	    endloop
	endloop

	# B21 matrix
	loop r = m1 .. m2
	    loop k = r .. m2
            B[k+n+2,r+1]= bincoeff(n-r,k-r) * (((k-r+2*nD)/(n1-r))^(k-r)) * (((n2-k)/(n1-r))^(n-k))
	    endloop
	endloop

	# B12 matrix
	loop r = 0 .. n-l1
	    loop k = l1+r .. n
            B[k+1,r+n+2] = bincoeff(n-r,k-r) * (((k-r-2*nD)/(n2-r))^(k-r)) * (((n1-k)/(n2-r))^(n-k))
	    endloop
	endloop

	# C vector
	matrix C = zeros(2*(n+1))

	# C1 vector
	loop k = m1 .. n
	    C[k+1] = bincoeff(n,k) * (((k-nD)/n)^k)*(((n1-k)/n)^(n-k))
	endloop

	# C2 vector
	loop k = 0 .. m2
	    C[n+2+k] = bincoeff(n,k) * (((k+nD)/n)^k)*(((n2-k)/n)^(n-k))
	endloop

	# system solution
	catch matrix Binv = ginv(B)
   if $error
       print "ERROR: D is too close to 0 or 1. Cannot be computed"
       return NA
   else
		matrix Z = Binv*C
		scalar alpha = sum(Z)
      return alpha
   endif
    
end function

function scalar find_my_root(scalar D, scalar n, scalar alpha)
    return D_pval(n,D) - alpha
end function 

function scalar D_exact_val(scalar n, scalar alpha)
    temp = 0.5
    catch D = fzero(find_my_root(temp, n, alpha), 0.5)
    if $error
        print "ERROR: Alpha too small or too big to be computed"
        return NA
    else 
        return D
    endif
end function 


function void KSTest(series s, string d, matrix pars)
	# Build Cumulative distribution for observation
	cumD = ecdf(s)
	
	if d == "N" || d == "n" || d == "z"
        # Compute hypothesized distribution
        hypD = zeros(rows(cumD))
        loop i = 1 .. rows(cumD)
            hypD[i] = cdf(N, cumD[i,1])
        endloop
        testType = "Normal"
        
	elif d == "t"
        hypD = zeros(rows(cumD))
        loop i = 1 .. rows(cumD)
            hypD[i] = cdf(t, cumD[i,1], pars[1])
        endloop
        testType = "Student's t"
        
    elif d == "c" || d == "x" || d == "X"
        hypD = zeros(rows(cumD))
        loop i = 1 .. rows(cumD)
            hypD[i] = cdf(x, cumD[i,1], pars[1])
        endloop
        testType = "Chi square"
    endif
    
    # Kolmogorov statistic
	Dn = max(abs(cumD[,2] .- hypD))
    
    # Critical value
    D = D_exact_val($nobs, 0.05)
        
	# p-val
	p = D_pval($nobs, Dn)
    
    if p >= 0.05
        rej = "not "
    else
        rej = ""
    endif
    
    print ""
    printf("- Kolmogorv-Smirnov Test -\nH0: %s distribution\nCritical value D (%d obs, alpha = 0.05) = %f\nDn = %f, p-val = %f - Hypothesis %srejected\n", testType, $nobs, D, Dn, p, rej)

end function

nulldata 20
a = normal()
KSTest(a, "N", {})
print D_exact_val(14, 0.000000000001)
